## MSFSS: A Storage System for Mass Small Files

我们设计并实现了一个叫做MSFSS的用于存储和访问大量小文件的可扩展的灵活的分布式文件系统。MSFSS是构建在现有的常用文件系统之上的一个平台。它能够通过它们的访问模式将文件存放到最合适的文件系统上。为了防止中央瓶颈，它优化了元数据大小，将元数据操作从文件数据传输中分离，并实现了批量元数据操作。该系统提供数据迁移、热点文件缓存和副本机制，这些都是构建大规模可靠的存储系统的必要的特性。它已经成功地用于我们的web应用程序的存储系统，我们的web应用有大约50TB的小文件。实验结果表明，MSFSS在文件操作方面，可以提供高可扩展性和高吞吐量。

# 1 介绍

因特网服务常常需要存储和访问大量的小文件，比如html文件，电子邮件，论文，图片等等。因特网服务的存储特点对现有的存储系统带来了挑战。第一，拥有10亿多个文件是很正常的。大量的文件在传统的分布式文件系统上会产生大量的元数据。这对元数据操作的高效性和可扩展性带来了压力。第二，文件不大。因此，没有必要将文件进行分条带地存储到多个服务器上。相反，我们可以将整个文件存储到一个服务器上，这样能够简化实现。第三，不同类型的数据通常有不同的性能、可靠性和可用性要求，这就在选择合适的存储系统方面增加了复杂性。比如，属于VIP用户的图片比免费用户的额图片提供更高的可靠性。

我们设计并实现了MSFSS，以此来满足因特网服务的存储需求。它是一个可扩展的和灵活的分布式文件系统，特别适合存储和访问小文件或者大小适度的文件。MSFSS基于分布单元来分布数据，而且它的元数据大小可以控制。另外，它还能通过在服务器集群中对元数据分区和对元数据操作进行批处理来提供元数据的性能。MSFSS构建于成熟的常用的文件系统之上，将块分配的细节留给底层来做。这样可以简化我们的设计，使得系统更加可靠。它还是高度可配置的，它可以自动为各种文件选择合适的底层文件系统。
现在，MSFSS已经部署为我们的web应用的存储系统，该web应用有大量用户。系统当前有50TB的数据，聚合带宽大约是100MB/s。

# 2 系统概要

## 2.1 体系结构

如图1，一个MSFSS集群由一个master，多个MDS服务器和若干个存储节SN点组成，它可以通过一个叫做FSI的客户端库进行访问。它们都是用户级进程，因此，只要机器资源允许，很容易将SN和MDS搭建在同一个机器上。

![](http://github.com/luofengmacheng/translation/raw/master/pic/pic1.png)

MSFSS通过一个全局唯一的128位的文件ID（FID）来标识一个文件，这个ID是在文件创建时生成的。SN将文件存储在本地文件系统，然后通过FID和范围来读写文件数据。MSFSS支持文件副本机制，通过分布式业务来保证副本一致性，使用快速同步来恢复不一致的副本。而且，它还支持并发控制和块操作，比如数据迁移和数据拷贝。

MDS将系统元数据保存在内存中，主要是DAT（Distribution unit Allocation Table分布单元分配表，它是分布单元和文件到存储节点的映射关系表）。它主要提供元数据操作，比如FID分配和文件位置查询。

Master持续监视存储节点和MDS的状态，并且平衡负载和控制整个系统的活动，比如，故障恢复、数据同步、数据迁移、终止未决的业务。Master周期性地与存储节点和元数据服务器通过心跳消息来通信，来收集它们的状态，并给他们指令。

FSI（链接到应用程序的客户端库）实现了MSFSS访问接口，代表应用程序访问文件。FSI从MDS处获取元数据，直接从存储节点处获取数据。它还会对元数据进行缓存，这样能够提高性能。

## 2.2 常用文件系统的协作

存储节点将存储管理中的繁杂任务留给常用文件系统，比如块分配，实践证明，这种策略使得系统更可靠。这种方法带来的好处：（1）减少实现成本；（2）能够有效利用多种有用的文件系统工具。

然而，没有常用文件系统对所有类型的文件是最优的。比如，ReiserFS可以高效地存储和访问小文件，但是它的挂载时间较长，而且可靠性比EXT2/3低。通过我们的测试，XFS和JFS的读吞吐量很高，但是文件创建效率很低。虽然EXT2/3使用较多，它的缺点是有严重的文件碎片，当文件系统运行时间过长会使性能显著下降。而且，不同的文件系统挂载选项对文件系统的性能和可靠性的影响很大。比如，最常用的选项之一是"sync"，它能够减少数据丢失的可能性，但是是以性能为代价的。

MSFSS对应用程序隐藏了常用的文件系统，能够基于文件所要求的性能、可靠性和开销自动选择文件系统。

## 2.3 分布单元

在一个分布式文件系统中，常常会有几亿个文件。上面已经提到过，MSFSS基于分布单元来进行分布，从而减少元数据大小。

分布单元的概念跟AFS中的卷的概念类似，代表文件的集合。另外，它还有所有文件的通常的存储属性，比如可靠性，性能，可用性需求，合适的大小，最大容量。合适的大小和最大容量限定了文件的大小和分布单元的容量。合适的大小提供了选择常用文件系统的一种基本原则。我们喜欢用ReiserFS存储小文件，并且会将大小相近的文件存放在同一个服务器上来减少文件系统碎片。分布单元的容量对元数据的大小有很大的影响。大的分布单元使得元数据较大，但是，小的分布单元容量能够获得更好的负载均衡能力和更快的副本同步速度。MSFSS能够通过分布单元的属性自动决定它的容量。比如，归档数据的分布单元容量较大。相反，副本数据的分布单元容量较小。

与文件类似，分布单元是通过一个全局的64位的分布单元ID来标识的。当新文件存储在系统中，分布单元自动被创建，不需要管理员的干涉。

## 2.4 FID 和 FID的分配

前面已经提到，MSFSS中的每个文件都有一个全局唯一的FID。如下所示，它是一个128位的整数，每个域都可以支持MSFSS的扩展。

![](http://github.com/luofengmacheng/translation/raw/master/pic/pic2.png)

UDID表示文件所在的分布单元ID，SEQ用于标识分布单元中的某个文件。为了简单起见，DUID和SEQ持续增长，MSFSS不会再使用之前已经分配的值。我们可以期望它们都足够大，MSFSS不会用完。比如，假如系统每秒产生一百万个文件，那么64位的SEQ可以用50万年。

MSFSS创建文件需要两步，因此，它需要两种网络消息。首先，FSI在一个系统选定的分布单元中分配一个FID；然后，FSI发送新分配的FID和文件数据给对应的存储节点。为了减少网络开销和MDS的负载，FID以批处理方式分配FID。也就是说，FSI在一个分配请求中分配多个FID，然后把FID缓存在本地内存，之后就可以快速分配。这种方法能够有效减少通信开销，使得每个创建请求只产生一个消息。即使在FSI故障时缓存的FID丢失了，由于FID的空间很大，可以忽略这部分FID。这种方法需要考虑的另一个问题是，它对负载均衡有负面影响。事实上，这并不是一个严重的问题，因为FSI的可用数量很大。另外，负载均衡可以通过限定一个批处理中FID分配的数量进行改善，防止只在一个分布单元中分配FID。

## 2.5 分布式元数据管理

传统文件系统中，元数据操作的工作量占到了典型文件系统工作量的一半，因此，提高元数据操作的效率对提高整个文件系统的性能至关重要。MSFSS通过以下集中方式提高元数据操作效率。第一，MSFSS最大限度地从文件数据中分离出文件元数据。元数据的操作被一个MDS集群集中管理。第二，渐渐少元数据大小，MSFSS采用了扁平的文件命名空间，将文件组合成分布单元，再将分布单元存储在存储节点上。因此，元数据很小，可以加载到MDS的内存中。第三，客户端库FSI可以缓存元数据。第四，MSFSS采用批量FID分配和预分配策略，就能够最小化MDS和FSI之间的通信负载。

MSFSS有两种主要的元数据：分布单元信息和每个分布单元的位置信息。首先，MSFSS用DUID将元数据哈希到bucket中；然后，它将元数据bucket分布到所有的MDS中。每个MDS会在内存中存储元数据，因此，可以提高元数据操作的速度。

元数据的前一种类型记录了每个分布单元的最大分配序列号，将它作为下一个FID分配的起始点。后者将分布单元映射到实际存储文件的一些存储节点。MDF不保存这种元数据的持久拷贝。在MDS启动时，检查所有的存储节点就能够获得所有的元数据。

## 2.6 并发控制

现在，MSFSS支持全文件锁，也就是锁整个文件，这对于小文件是足够的。为了最小化master在系统活动中的参与，锁服务是在存储节点实现的。

与DBMS类似，MSFSS采用多种粒度的锁和意向锁。特别地，有两种级别的锁：文件锁和分布单元锁。为了读一个文件，存储节点首先向对应的分布单元申请一个读意向锁，然后向申请对文件的读锁；类似的，在写操作之前，必须申请对应分布单元的写意向锁，然后申请文件的写锁；同样的，为了迁移数据，需要申请分布单元的读锁。如果是副本文件，读操作只需要获得主副本的锁，而写操作则需要获得所有副本的锁。

在拷贝分布单元时，可能会发生死锁，因为需要获得所有副本的锁。我们给一个存储节点一个序列号，然后按照序列号来申请锁，以此来避免死锁。





















